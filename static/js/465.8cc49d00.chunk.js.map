{"version":3,"file":"static/js/465.8cc49d00.chunk.js","mappings":"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","sources":["boidsWorker.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["/* eslint no-restricted-globals: 1 */\r\nimport { Clock, Vector3, MathUtils } from \"three\";\r\n\r\nconst state = {\r\n  /**\r\n   * The clock to use for determining periodic amounts.\r\n   * @type {Clock}\r\n   */\r\n  clock: null,\r\n\r\n  /**\r\n   * The time period, in seconds, over which to vary behavior.\r\n   * @type {Number}\r\n   */\r\n  periodSeconds: 1.0,\r\n\r\n  /**\r\n   * The offset to use for the time period.\r\n   * @type {Number}\r\n   */\r\n   periodOffset: 0.0,\r\n\r\n  /**\r\n   * The maximum bounds of the collection.\r\n   * @type {Vector3}\r\n   */\r\n  bounds: null,\r\n\r\n  /**\r\n   * The minimum bounds of the collection.\r\n   * @type {Vector3}\r\n   */\r\n  innerBounds: null,\r\n\r\n  /**\r\n   * If true, indicates that inner bounding is present for the collection.\r\n   * @type {Boolean}\r\n   */\r\n  hasInnerBounds: false,\r\n\r\n  /**\r\n   * The length of the maximum allowable velocity vector.\r\n   * @type {Number} \r\n   */\r\n  velocityMaxLength: 0,\r\n\r\n  /**\r\n   * The squared length of the maximum allowable velocity vector.\r\n   * @type {Number}\r\n   */\r\n  velocityMaxLengthSq: 0,\r\n\r\n  // /**\r\n  //  * The upper clamp value to apply to the velocity.\r\n  //  * @type {Vector3}\r\n  //  */\r\n  // velocityUpperClamp: null,\r\n\r\n  // /**\r\n  //   * The lower clamp value to apply to the velocity.\r\n  //   * @type {Vector3}\r\n  //   */\r\n  // velocityLowerClamp: null,\r\n\r\n  /**\r\n   * The bias to apply for the attraction/repulsion factor, which normally oscillates between -1 (repulsion), and 1 (attraction).\r\n   * @type {Number}\r\n   */\r\n  attractionRepulsionBias: 0.0,\r\n\r\n  /**\r\n   * The intensity of the attraction/repulsion velocity, as a 0.0-1.0 percentage.\r\n   * @type {Number}\r\n   */\r\n  attractionRepulsionIntensity: 0.0,\r\n\r\n  /**\r\n   * The intensity of the \"revert to initial state\" velocity, as a 0.0-1.0 percentage.\r\n   */\r\n  revertIntensity: 0.0,\r\n\r\n  /**\r\n   * The threshold for the distancing effect, as a percentage of the length squared.\r\n   * @type {Number}\r\n   */\r\n  distancingLengthSquared: 0.0,\r\n\r\n  /**\r\n   * The intensity of the \"distancing\" velocity, as a 0.0-1.0 percentage.\r\n   * @type {Number}\r\n   */\r\n  distancingIntensity: 0.0,\r\n\r\n  /**\r\n   * The intensity of the \"matching\" velocity, as a 0.0-1.0 percentage.\r\n   * @type {Number}\r\n   */\r\n  matchingVelocityIntensity: 0.0,\r\n\r\n  /**\r\n   * The intensity of the \"return\" velocity, as a 0.0-1.0 percentage.\r\n   * @type {Number}\r\n   */\r\n  boundingReturnIntensity: 0.0,\r\n  \r\n  /**\r\n   * The totaled center of the boids.\r\n   * @type {Vector3}\r\n   */\r\n  totaledCenter: null,\r\n\r\n  /**\r\n   * The totaled velocity of the boids.\r\n   * @type {Vector3}\r\n   */\r\n  totaledVelocity: null,\r\n\r\n  /**\r\n   * The number of boids being tracked.\r\n   * @type {Number}\r\n   */\r\n  length: 0,\r\n\r\n  /**\r\n   * The initial positions used to start the process.\r\n   * @type {Array<Vector3>}\r\n   */\r\n  initialPositions: [],\r\n\r\n  /**\r\n   * An array of boid positions.\r\n   * @type {Array<Vector3>}\r\n   */\r\n  positions: [],\r\n\r\n  /**\r\n   * An array of boid velocities.\r\n   * @type {Array<Vector3>}\r\n   */\r\n  velocities: []\r\n}\r\n\r\nconst fns = {};\r\n\r\nfns.handleInit = function(data) {\r\n  // Create a clock\r\n  state.clock = new Clock();\r\n  state.periodSeconds = data.periodSeconds;\r\n  state.periodOffset = MathUtils.randFloat(0, state.periodSeconds);\r\n\r\n  // Copy over the bounds arrays\r\n  state.bounds = new Vector3(data.bounds[0], data.bounds[1], data.bounds[2]);\r\n  state.innerBounds = new Vector3(data.innerBounds[0], data.innerBounds[1], data.innerBounds[2]);\r\n  state.hasInnerBounds = (state.innerBounds.lengthSq() > 0);\r\n\r\n  // Determine the distance threshold based on the bounds and threshold\r\n  if (data.distancingThreshold > 0) {\r\n    state.distancingLengthSquared = state.bounds.lengthSq() * data.distancingThreshold;\r\n    state.distancingIntensity = 0.1;\r\n  }\r\n  else {\r\n    state.distancingLengthSquared = 0;\r\n    state.distancingIntensity = 0;\r\n  }\r\n\r\n  // Calculate clamping for velocities\r\n  const maxVelocity = state.bounds.clone().multiplyScalar(data.maximumVelocity);\r\n\r\n  state.velocityMaxLength = maxVelocity.length();\r\n  state.velocityMaxLengthSq = maxVelocity.lengthSq();\r\n\r\n  // Determine the number of boids\r\n  state.length = data.initialPositions.length;\r\n\r\n  if (state.length < 2) {\r\n    throw Error('At least two boids must be provided!');\r\n  }\r\n\r\n  // Track totals for the center and velocity\r\n  state.totaledCenter = new Vector3();\r\n  state.totaledVelocity = new Vector3();\r\n\r\n  // Create positions/velocities\r\n  for (const positionArray of data.initialPositions) {\r\n    const positionVector = new Vector3(positionArray[0], positionArray[1], positionArray[2]);\r\n\r\n    state.initialPositions.push(positionVector.clone());\r\n    state.positions.push(positionVector);\r\n    state.totaledCenter.add(positionVector);\r\n\r\n    // Don't assign any velocities for now\r\n    state.velocities.push(new Vector3());\r\n  }\r\n\r\n  // Copy over new configurations\r\n  state.attractionRepulsionBias = data.attractionRepulsionBias;\r\n  state.attractionRepulsionIntensity = data.attractionRepulsionIntensity;\r\n  state.revertIntensity = data.revertIntensity;\r\n  state.matchingVelocityIntensity = data.matchingVelocityIntensity;\r\n  state.boundingReturnIntensity = data.boundingReturnIntensity;\r\n};\r\n\r\n/**\r\n * Gets a velocity vector to congregate/distance the boid to or from the center of mass. (Boids Rule 1)\r\n * @param {Number} boidIdx The index of the boid.\r\n * @returns {Vector3} The velocity vector to apply for centering.\r\n */\r\nfns.getCenterMassAttractionRepulsionVector = function(boidIdx) {\r\n  const currentPosition = state.positions[boidIdx];\r\n\r\n  // Calculate the perceived center by removing the current position and turning it into an average\r\n  const perceivedCenter = state.totaledCenter.clone();\r\n  perceivedCenter.sub(currentPosition);\r\n  perceivedCenter.divideScalar(state.length - 1);\r\n\r\n  return perceivedCenter;\r\n};\r\n\r\n/**\r\n * Gets a velocity vector to revert to the initial position.\r\n * @param {Number} boidIdx The index of the boid.\r\n * @returns {Vector3} The velocity vector to apply for reverting to the initial position.\r\n */\r\nfns.getInitialPositionVector = function(boidIdx) {\r\n  // Determine what it would take to get from the current position to the initial position\r\n  const currentPosition = state.positions[boidIdx];\r\n  const initialPosition = state.initialPositions[boidIdx].clone();\r\n\r\n  initialPosition.sub(currentPosition);\r\n\r\n  return initialPosition;\r\n}\r\n\r\n/**\r\n * Gets a velocity vector to distance the boid from other nearby boids. (Boids Rule 2)\r\n * @param {Number} boidIdx The index of the boid.\r\n * @returns {Vector3} The velocity vector to apply for distancing from other boids.\r\n */\r\nfns.getDistancingVector = function(boidIdx) {\r\n  const currentPosition = state.positions[boidIdx];\r\n  const distancingResult = new Vector3();\r\n\r\n  // Look at all other boids in the flock\r\n  for(let i = 0; i < state.length; i++) {\r\n    if (i === boidIdx) {\r\n      continue;\r\n    }\r\n\r\n    // If they are close enough, incorporate the distancing result into the velocity vector\r\n    const otherPosition = state.positions[i];\r\n\r\n    if (currentPosition.distanceToSquared(otherPosition) < state.distancingLengthSquared) {\r\n      distancingResult.sub(otherPosition).add(currentPosition);\r\n    }\r\n  }\r\n\r\n  return distancingResult;\r\n};\r\n\r\n/**\r\n * Gets a velocity vector to match the velocity of nearby boids. (Boids Rule 3)\r\n * @param {Number} boidIdx The index of the boid.\r\n * @returns {Vector3} The velocity vector to apply for speed-matching.\r\n */\r\nfns.getMatchingVector = function(boidIdx) {\r\n  const currentVelocity = state.velocities[boidIdx];\r\n\r\n  // Calculate the perceived velocity by removing the current velocity and turning it into an average\r\n  const perceivedVelocity = state.totaledVelocity.clone();\r\n  perceivedVelocity.sub(currentVelocity);\r\n  perceivedVelocity.divideScalar(state.length - 1);\r\n\r\n  // To turn into a delta, subtract the current velocity from the average\r\n  return perceivedVelocity.sub(currentVelocity);\r\n};\r\n\r\n/**\r\n * Gets a velocity vector to ensure that the boid mainly stays within its bounds.\r\n * @param {Number} boidIdx The index of the boid.\r\n * @returns {Vector3} The velocity vector to apply for staying within bounds.\r\n */\r\nfns.getBoundsVector = function (boidIdx) {\r\n  const returnVelocity = new Vector3();\r\n  const currentPosition = state.positions[boidIdx];\r\n\r\n  // Snap x-values\r\n  if (currentPosition.x > state.bounds.x) {\r\n    returnVelocity.setX(-state.bounds.x);\r\n  }\r\n  else if (currentPosition.x < -state.bounds.x) {\r\n    returnVelocity.setX(state.bounds.x);\r\n  }\r\n\r\n  // Snap y-values\r\n  if (currentPosition.y > state.bounds.y) {\r\n    returnVelocity.setY(-state.bounds.y);\r\n  }\r\n  else if (currentPosition.y < -state.bounds.y) {\r\n    returnVelocity.setY(state.bounds.y);\r\n  }\r\n\r\n  // Snap z-values\r\n  if (currentPosition.z > state.bounds.z) {\r\n    returnVelocity.setZ(-state.bounds.z);\r\n  }\r\n  else if (currentPosition.z < -state.bounds.z) {\r\n    returnVelocity.setZ(state.bounds.z);\r\n  }\r\n\r\n  // See if there are inner bounds to obey\r\n  if (state.hasInnerBounds && returnVelocity.lengthSq() === 0) {\r\n    let innerReturnX = 0;\r\n    let innerReturnY = 0;\r\n    let innerReturnZ = 0;\r\n\r\n    // Make sure we're within the range for the inner x-bound\r\n    if (currentPosition.x < state.innerBounds.x && currentPosition.x > -state.innerBounds.x) {\r\n      // Move away from zero - so positive values become more positive, negative values become more negative\r\n      if (currentPosition.x > 0) {\r\n        innerReturnX = state.innerBounds.x;\r\n      }\r\n      else {\r\n        innerReturnX = -state.innerBounds.x;\r\n      }\r\n    }\r\n\r\n    // Make sure we're within the range for the inner z-bound\r\n    if (currentPosition.y < state.innerBounds.y && currentPosition.y > -state.innerBounds.y) {\r\n      // Move away from zero - so positive values become more positive, negative values become more negative\r\n      if (currentPosition.y > 0) {\r\n        innerReturnY = state.innerBounds.y;\r\n      }\r\n      else {\r\n        innerReturnY = -state.innerBounds.y;\r\n      }\r\n    }\r\n\r\n    // Make sure we're within the range for the inner z-bound\r\n    if (currentPosition.z < state.innerBounds.z && currentPosition.z > -state.innerBounds.z) {\r\n      // Move away from zero - so positive values become more positive, negative values become more negative\r\n      if (currentPosition.z > 0) {\r\n        innerReturnZ = state.innerBounds.z;\r\n      }\r\n      else {\r\n        innerReturnZ = -state.innerBounds.z;\r\n      }\r\n    }\r\n\r\n    // If we have matches on ALL three inner return dimensions, apply the velocity\r\n    if (innerReturnX !== 0 && innerReturnY !== 0 && innerReturnZ !== 0) {\r\n      returnVelocity.set(innerReturnX, innerReturnY, innerReturnZ);\r\n    }\r\n  }\r\n\r\n  return returnVelocity;\r\n};\r\n\r\n/**\r\n * Handles when the consumer is ready for another frame by applying move operations.\r\n */\r\n fns.handleReady = function() {\r\n  // Determine the attraction/repulsion factor.\r\n  // Get the elapsed time, add the offset, convert to radians, and divide by the period.\r\n  // This ensures that over time, we should oscillate between attraction and repulsion (assuming no bias)\r\n  const rawClockAmount = (state.clock.getElapsedTime() + state.periodOffset) / state.periodSeconds;\r\n  const clockPercentage = rawClockAmount - Math.floor(rawClockAmount);\r\n  const attractionRepulsionFactor = MathUtils.clamp(Math.sin(clockPercentage * 2 * Math.PI) + state.attractionRepulsionBias, -1, 1);\r\n  // const attractionRepulsionFactor = MathUtils.smootherstep(clockPercentage, -1, 1);\r\n  // const attractionRepulsionFactor = 1;\r\n\r\n  // Track the new center and velocity\r\n  const newCenterTotal = new Vector3();\r\n  const newVelocityTotal = new Vector3();\r\n\r\n  // Handle each boid in turn\r\n  for (let boidIdx = 0; boidIdx < state.length; boidIdx++) {\r\n    const newVelocity = new Vector3();\r\n\r\n    // Incorporate rule 1 with attraction/repulsion scaling factored in\r\n    if (state.attractionRepulsionIntensity > 0.0 && attractionRepulsionFactor !== 0) {\r\n      newVelocity.addScaledVector(this.getCenterMassAttractionRepulsionVector(boidIdx), attractionRepulsionFactor * state.attractionRepulsionIntensity);\r\n    }\r\n\r\n    if (state.distancingLengthSquared > 0 && state.distancingIntensity > 0) {\r\n      newVelocity.addScaledVector(this.getDistancingVector(boidIdx), state.distancingIntensity);\r\n    }\r\n\r\n    if (state.matchingVelocityIntensity !== 0) {\r\n      newVelocity.addScaledVector(this.getMatchingVector(boidIdx), state.matchingVelocityIntensity);\r\n    }\r\n\r\n    if (state.revertIntensity !== 0) {\r\n      newVelocity.addScaledVector(this.getInitialPositionVector(boidIdx), state.revertIntensity);\r\n    }\r\n\r\n    if (state.boundingReturnIntensity !== 0) {\r\n      newVelocity.addScaledVector(this.getBoundsVector(boidIdx), state.boundingReturnIntensity);\r\n    }\r\n    \r\n    // Now update the velocity vector for the boid\r\n    state.velocities[boidIdx].add(newVelocity);\r\n\r\n    // Ensure this velocity is clamped\r\n    if (state.velocityMaxLength > 0 && state.velocities[boidIdx].lengthSq() > state.velocityMaxLengthSq) {\r\n      // Scale to a unit vector and then scale back to the maximum length\r\n      state.velocities[boidIdx].normalize().multiplyScalar(state.velocityMaxLength);\r\n    }\r\n\r\n    state.positions[boidIdx].add(state.velocities[boidIdx]);\r\n\r\n    // Add to the running totals\r\n    newCenterTotal.add(state.positions[boidIdx]);\r\n    newVelocityTotal.add(state.velocities[boidIdx]);\r\n  }\r\n\r\n  // Update the center/velocity calculations\r\n  state.totaledCenter = newCenterTotal;\r\n  state.totaledVelocity = newVelocityTotal;\r\n\r\n  // Now start building the message, setting transferrable buffers, and doing cleanup\r\n  const transferObjects = [];\r\n  const message = {\r\n    type: 'result',\r\n    clockPercentage: clockPercentage,\r\n    attractionRepulsionFactor: attractionRepulsionFactor,\r\n    means: [],\r\n    stdevs: [],\r\n    positions: []\r\n  };\r\n\r\n  // Calculate means in the x, y, and z dimensions\r\n  message.means = [\r\n    state.totaledCenter.x / state.length,\r\n    state.totaledCenter.y / state.length,\r\n    state.totaledCenter.z / state.length\r\n  ];\r\n\r\n  // Also track running totals for variance\r\n  let varianceSumX = 0.0;\r\n  let varianceSumY = 0.0;\r\n  let varianceSumZ = 0.0;\r\n\r\n  for(let boidIdx = 0; boidIdx < state.length; boidIdx++) {\r\n    const boidPosition = state.positions[boidIdx];\r\n\r\n    // Convert the position vector into a float array\r\n    const positionArray = new Float32Array(3);\r\n    positionArray[0] = boidPosition.x;\r\n    positionArray[1] = boidPosition.y;\r\n    positionArray[2] = boidPosition.z;\r\n\r\n    // Determine variance totals for this entry\r\n    varianceSumX += Math.pow(positionArray[0] - message.means[0], 2);\r\n    varianceSumY += Math.pow(positionArray[1] - message.means[1], 2);\r\n    varianceSumZ += Math.pow(positionArray[2] - message.means[2], 2);\r\n\r\n    // Add the position array as a transferrable object\r\n    message.positions.push(positionArray);\r\n    transferObjects.push(positionArray.buffer);\r\n  }\r\n\r\n  // Finish calculating stdevs\r\n  message.stdevs = [\r\n    Math.max(Math.sqrt(varianceSumX / state.length), 0.01),\r\n    Math.max(Math.sqrt(varianceSumY / state.length), 0.01), \r\n    Math.max(Math.sqrt(varianceSumZ / state.length), 0.01)\r\n  ];\r\n\r\n  // Post the message\r\n  self.postMessage(message, transferObjects);\r\n};\r\n\r\n/**\r\n * Handles when a reset has been requested.\r\n */\r\nfns.handleReset = function() {\r\n  // Reset all positions to their initial values\r\n  const newCenterTotal = new Vector3();\r\n\r\n  for(let boidIdx = 0; boidIdx < state.length; boidIdx++) {\r\n    state.positions[boidIdx].copy(state.initialPositions[boidIdx]);\r\n    newCenterTotal.add(state.positions[boidIdx]);\r\n\r\n    // Zero out velocity\r\n    state.velocities[boidIdx].multiplyScalar(0);\r\n  }\r\n\r\n  state.totaledCenter = newCenterTotal;\r\n  state.totaledVelocity.multiplyScalar(0);\r\n};\r\n\r\nself.onmessage = function(e) {\r\n  switch(e.data.type) {\r\n    case 'init':\r\n      fns.handleInit(e.data);\r\n      break;\r\n\r\n    case 'ready':\r\n      fns.handleReady();\r\n      break;\r\n\r\n    case 'reset':\r\n      fns.handleReset();\r\n      break;\r\n\r\n    default:\r\n      console.warn(`unrecognized message type: ${e.data.type}`, e);\r\n  }\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [760], function() { return __webpack_require__(7465); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"025b1d20\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/fermata/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t465: 1,\n\t553: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkfermata\"] = self[\"webpackChunkfermata\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(760).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["state","clock","periodSeconds","periodOffset","bounds","innerBounds","hasInnerBounds","velocityMaxLength","velocityMaxLengthSq","attractionRepulsionBias","attractionRepulsionIntensity","revertIntensity","distancingLengthSquared","distancingIntensity","matchingVelocityIntensity","boundingReturnIntensity","totaledCenter","totaledVelocity","length","initialPositions","positions","velocities","fns","data","Clock","MathUtils","Vector3","lengthSq","distancingThreshold","maxVelocity","clone","multiplyScalar","maximumVelocity","Error","positionArray","positionVector","push","add","boidIdx","currentPosition","perceivedCenter","sub","divideScalar","initialPosition","distancingResult","i","otherPosition","distanceToSquared","currentVelocity","perceivedVelocity","returnVelocity","x","setX","y","setY","z","setZ","innerReturnX","innerReturnY","innerReturnZ","set","rawClockAmount","getElapsedTime","clockPercentage","Math","floor","attractionRepulsionFactor","sin","PI","newCenterTotal","newVelocityTotal","newVelocity","addScaledVector","this","getCenterMassAttractionRepulsionVector","getDistancingVector","getMatchingVector","getInitialPositionVector","getBoundsVector","normalize","transferObjects","message","type","means","stdevs","varianceSumX","varianceSumY","varianceSumZ","boidPosition","Float32Array","pow","buffer","max","sqrt","self","postMessage","copy","onmessage","e","handleInit","handleReady","handleReset","console","warn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","f","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}